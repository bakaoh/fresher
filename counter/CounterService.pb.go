// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: CounterService.proto

package counter

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserReq struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Balance              int64    `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserReq) Reset()         { *m = UserReq{} }
func (m *UserReq) String() string { return proto.CompactTextString(m) }
func (*UserReq) ProtoMessage()    {}
func (*UserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_CounterService_9847afcd778f691a, []int{0}
}
func (m *UserReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserReq.Unmarshal(m, b)
}
func (m *UserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserReq.Marshal(b, m, deterministic)
}
func (dst *UserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserReq.Merge(dst, src)
}
func (m *UserReq) XXX_Size() int {
	return xxx_messageInfo_UserReq.Size(m)
}
func (m *UserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserReq proto.InternalMessageInfo

func (m *UserReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserReq) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type BalanceRes struct {
	Balance              int64    `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BalanceRes) Reset()         { *m = BalanceRes{} }
func (m *BalanceRes) String() string { return proto.CompactTextString(m) }
func (*BalanceRes) ProtoMessage()    {}
func (*BalanceRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_CounterService_9847afcd778f691a, []int{1}
}
func (m *BalanceRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BalanceRes.Unmarshal(m, b)
}
func (m *BalanceRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BalanceRes.Marshal(b, m, deterministic)
}
func (dst *BalanceRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceRes.Merge(dst, src)
}
func (m *BalanceRes) XXX_Size() int {
	return xxx_messageInfo_BalanceRes.Size(m)
}
func (m *BalanceRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceRes.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceRes proto.InternalMessageInfo

func (m *BalanceRes) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func init() {
	proto.RegisterType((*UserReq)(nil), "com.example.grpc.UserReq")
	proto.RegisterType((*BalanceRes)(nil), "com.example.grpc.BalanceRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CounterService service

type CounterServiceClient interface {
	SetBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error)
	GetBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error)
	IncreaseBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error)
	DecreaseBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error)
}

type counterServiceClient struct {
	cc *grpc.ClientConn
}

func NewCounterServiceClient(cc *grpc.ClientConn) CounterServiceClient {
	return &counterServiceClient{cc}
}

func (c *counterServiceClient) SetBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error) {
	out := new(BalanceRes)
	err := c.cc.Invoke(ctx, "/com.example.grpc.CounterService/SetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) GetBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error) {
	out := new(BalanceRes)
	err := c.cc.Invoke(ctx, "/com.example.grpc.CounterService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) IncreaseBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error) {
	out := new(BalanceRes)
	err := c.cc.Invoke(ctx, "/com.example.grpc.CounterService/IncreaseBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterServiceClient) DecreaseBalance(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*BalanceRes, error) {
	out := new(BalanceRes)
	err := c.cc.Invoke(ctx, "/com.example.grpc.CounterService/DecreaseBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CounterService service

type CounterServiceServer interface {
	SetBalance(context.Context, *UserReq) (*BalanceRes, error)
	GetBalance(context.Context, *UserReq) (*BalanceRes, error)
	IncreaseBalance(context.Context, *UserReq) (*BalanceRes, error)
	DecreaseBalance(context.Context, *UserReq) (*BalanceRes, error)
}

func RegisterCounterServiceServer(s *grpc.Server, srv CounterServiceServer) {
	s.RegisterService(&_CounterService_serviceDesc, srv)
}

func _CounterService_SetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).SetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.grpc.CounterService/SetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).SetBalance(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.grpc.CounterService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).GetBalance(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_IncreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).IncreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.grpc.CounterService/IncreaseBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).IncreaseBalance(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterService_DecreaseBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServiceServer).DecreaseBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.example.grpc.CounterService/DecreaseBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServiceServer).DecreaseBalance(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CounterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.example.grpc.CounterService",
	HandlerType: (*CounterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBalance",
			Handler:    _CounterService_SetBalance_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _CounterService_GetBalance_Handler,
		},
		{
			MethodName: "IncreaseBalance",
			Handler:    _CounterService_IncreaseBalance_Handler,
		},
		{
			MethodName: "DecreaseBalance",
			Handler:    _CounterService_DecreaseBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CounterService.proto",
}

func init() {
	proto.RegisterFile("CounterService.proto", fileDescriptor_CounterService_9847afcd778f691a)
}

var fileDescriptor_CounterService_9847afcd778f691a = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x71, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0x0a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x48, 0xce, 0xcf, 0xd5, 0x4b, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x4b, 0x2f,
	0x2a, 0x48, 0x56, 0xb2, 0xe6, 0x62, 0x0f, 0x2d, 0x4e, 0x2d, 0x0a, 0x4a, 0x2d, 0x14, 0x12, 0xe3,
	0x62, 0x2b, 0x2d, 0x4e, 0x2d, 0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2,
	0x84, 0x24, 0xb8, 0xd8, 0x93, 0x12, 0x73, 0x12, 0xf3, 0x92, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35,
	0x98, 0x83, 0x60, 0x5c, 0x25, 0x35, 0x2e, 0x2e, 0x27, 0x08, 0x33, 0x28, 0xb5, 0x18, 0x59, 0x1d,
	0x23, 0x8a, 0x3a, 0xa3, 0x6d, 0x4c, 0x5c, 0x7c, 0xa8, 0xee, 0x11, 0x72, 0xe5, 0xe2, 0x0a, 0x4e,
	0x2d, 0x81, 0xea, 0x16, 0x92, 0xd4, 0x43, 0x77, 0x98, 0x1e, 0xd4, 0x55, 0x52, 0x32, 0x98, 0x52,
	0x48, 0x76, 0xba, 0x72, 0x71, 0xb9, 0x53, 0xc1, 0x18, 0x2f, 0x2e, 0x7e, 0xcf, 0xbc, 0xe4, 0xa2,
	0xd4, 0xc4, 0xe2, 0x54, 0x6a, 0x98, 0xe5, 0x92, 0x4a, 0x1d, 0xb3, 0x9c, 0x38, 0xa3, 0xd8, 0x93,
	0x21, 0xe1, 0x96, 0xc4, 0x06, 0x8e, 0x41, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x3e,
	0x2f, 0x41, 0xd9, 0x01, 0x00, 0x00,
}
